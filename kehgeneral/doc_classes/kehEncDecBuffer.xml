<?xml version="1.0" encoding="UTF-8" ?>
<class name="kehEncDecBuffer" inherits="Reference" version="3.2">
	<brief_description>
		Simplify the task of encoding/decoding data into/from low level bytes (PoolByteArray).
	</brief_description>
	<description>
		The kehEncDecBuffer is meant to simplify the task of encoding/decoding data into low level bytes ([PoolByteArray]). The thing is, the ideal is to remove the variant header bytes from properties, which incorporate 4 bytes to each one.
		This class deals with a sub-set of the types given by Godot scripting and was primarily meant to be used with the networking addon, but this can be useful in other scenarios, like saving systems for example.
		Now, why this trouble? Variables in GDScript take more bytes than we normally expect. Each one contains an additional set of 4 bytes representing the "header", which is basically indicating to Godot which type is actually held in memory. Some types may even bring further overhead and directly using them through the network may not necessarily be the best option.
		Now there is one very special case here. Unfortunally we don't have unsigned integers within GDScript. This brings a somewhat not so fun "limitation" to how numbers are represented.
		The maximum positive number that can be represented with an unsigned 32 bit integer is 4294967295. However, because GDScript only deals with signed numbers, the limit here would be 2147483647. But we can have bigger positive numbers in GDScript, only that behind the scenes Godot uses 64 bit integers for those cases. In other words, if we directly send a hash number (32 bit), the result will be that 12 bytes will be used instead of just 8 (or the desired 4 bytes).
		This class allows "unsigned integers" to be stored in the PoolByteArray using the desired 4 bytes, provided the value stays within the boundary.
	</description>
	<tutorials>
		<link>http://kehomsforge.com/tutorials/multi/GodotAddonPack</link>
	</tutorials>
	<methods>
		<method name="get_current_size" qualifiers="const">
			<return type="int">
			</return>
			<description>
				Returns amount of bytes currently in use within the internal buffer.
			</description>
		</method>
		<method name="has_read_data" qualifiers="const">
			<return type="bool">
			</return>
			<description>
				Returns true if the reading index is not past the last byte of the internal buffer.
			</description>
		</method>
		<method name="read_bool">
			<return type="bool">
			</return>
			<description>
				Extract a boolean value from the internal buffer. Automatically moves the reading index by 1 byte.
			</description>
		</method>
		<method name="read_byte">
			<return type="int">
			</return>
			<description>
				Extract a byte value from the internal buffer. Automatically moves the reading index by 1 byte.
			</description>
		</method>
		<method name="read_color">
			<return type="Color">
			</return>
			<description>
				Extract a [Color] value from the internal buffer. Automatically moves the reading index by 16 bytes.
			</description>
		</method>
		<method name="read_float">
			<return type="float">
			</return>
			<description>
				Extract a floating point value from the internal buffer. Automatically moves the reading index by 4 bytes.
			</description>
		</method>
		<method name="read_int">
			<return type="int">
			</return>
			<description>
				Extract an integer (signed) from the internal buffer. Automatically moves the reading index by 4 bytes.
			</description>
		</method>
		<method name="read_quat">
			<return type="Quat">
			</return>
			<description>
				Extract a quaternion ([Quat]) value from the internal buffer. Automatically moves the reading index by 16 bytes.
			</description>
		</method>
		<method name="read_rect2">
			<return type="Rect2">
			</return>
			<description>
				Extract a [Rect2] value from the internal buffer. Automatically moves the reading index by 16 bytes.
			</description>
		</method>
		<method name="read_string">
			<return type="String">
			</return>
			<description>
				Extract a [String] value from the internal buffer. Automatically moves the reading index by 4 + string size bytes.
			</description>
		</method>
		<method name="read_uint">
			<return type="int">
			</return>
			<description>
				Extract an integer as if it were unsigned from the internal buffer. Automatically moves the reading index by 4 bytes.
			</description>
		</method>
		<method name="read_ushort">
			<return type="int">
			</return>
			<description>
				Extract an integer as if it were unsigned and 16 bits from the internal buffer. Automatically moves the reading index by 2 bytes.
			</description>
		</method>
		<method name="read_vector2">
			<return type="Vector2">
			</return>
			<description>
				Extract a [Vector2] from the internal buffer. Automatically moves the reading index by 8 bytes.
			</description>
		</method>
		<method name="read_vector3">
			<return type="Vector3">
			</return>
			<description>
				Extract a [Vector3] from the internal buffer. Automatically moves the reading index by 12 bytes.
			</description>
		</method>
		<method name="rewrite_bool">
			<return type="void">
			</return>
			<argument index="0" name="value" type="bool">
			</argument>
			<argument index="1" name="offset" type="int">
			</argument>
			<description>
				Rewrite a boolean value within the internal buffer at the specified [i]offset[/i].
			</description>
		</method>
		<method name="rewrite_byte">
			<return type="void">
			</return>
			<argument index="0" name="value" type="int">
			</argument>
			<argument index="1" name="offset" type="int">
			</argument>
			<description>
				Rewrite a byte value within the internal buffer at the specified [i]offset[/i].
			</description>
		</method>
		<method name="rewrite_color">
			<return type="void">
			</return>
			<argument index="0" name="value" type="Color">
			</argument>
			<argument index="1" name="offset" type="int">
			</argument>
			<description>
				Rewrite a [Color] value within the internal buffer at the specified [i]offset[/i].
			</description>
		</method>
		<method name="rewrite_float">
			<return type="void">
			</return>
			<argument index="0" name="value" type="float">
			</argument>
			<argument index="1" name="offset" type="int">
			</argument>
			<description>
				Rewrite a floating point value within the internal buffer at the specified [i]offset[/i].
			</description>
		</method>
		<method name="rewrite_int">
			<return type="void">
			</return>
			<argument index="0" name="value" type="int">
			</argument>
			<argument index="1" name="offset" type="int">
			</argument>
			<description>
				Rewrite an integer (signed) value within the internal buffer at the specified [i]offset[/i].
			</description>
		</method>
		<method name="rewrite_quat">
			<return type="void">
			</return>
			<argument index="0" name="value" type="Quat">
			</argument>
			<argument index="1" name="offset" type="int">
			</argument>
			<description>
				Rewrite a quaternion ([Quat]) value within the internal buffer at the specified [i]offset[/i].
			</description>
		</method>
		<method name="rewrite_rect2">
			<return type="void">
			</return>
			<argument index="0" name="value" type="Rect2">
			</argument>
			<argument index="1" name="offset" type="int">
			</argument>
			<description>
				Rewrite a [Rect2] value within the internal buffer at the specified [i]offset[/i].
			</description>
		</method>
		<method name="rewrite_uint">
			<return type="void">
			</return>
			<argument index="0" name="value" type="int">
			</argument>
			<argument index="1" name="offset" type="int">
			</argument>
			<description>
				Rewrite an unsigned integer value within the internal buffer at the specified [i]offset[/i].
			</description>
		</method>
		<method name="rewrite_ushort">
			<return type="void">
			</return>
			<argument index="0" name="value" type="int">
			</argument>
			<argument index="1" name="offset" type="int">
			</argument>
			<description>
				Rewrite a short unsigned integer value within the internal buffer at the specified [i]offset[/i].
			</description>
		</method>
		<method name="rewrite_vector2">
			<return type="void">
			</return>
			<argument index="0" name="value" type="Vector2">
			</argument>
			<argument index="1" name="offset" type="int">
			</argument>
			<description>
				Rewrite a [Vector2] value within the internal buffer at the specified [i]offset[/i].
			</description>
		</method>
		<method name="rewrite_vector3">
			<return type="void">
			</return>
			<argument index="0" name="value" type="Vector3">
			</argument>
			<argument index="1" name="offset" type="int">
			</argument>
			<description>
				Rewrite a [Vector3] value within the internal buffer at the specified [i]offset[/i].
			</description>
		</method>
		<method name="write_bool">
			<return type="void">
			</return>
			<argument index="0" name="value" type="bool">
			</argument>
			<description>
				Append a boolean value at the internal buffer.
			</description>
		</method>
		<method name="write_byte">
			<return type="void">
			</return>
			<argument index="0" name="value" type="int">
			</argument>
			<description>
				Append a byte value at the internal buffer.
			</description>
		</method>
		<method name="write_color">
			<return type="void">
			</return>
			<argument index="0" name="value" type="Color">
			</argument>
			<description>
				Append a [Color] value at the internal buffer.
			</description>
		</method>
		<method name="write_float">
			<return type="void">
			</return>
			<argument index="0" name="value" type="float">
			</argument>
			<description>
				Append a floating point value at the internal buffer.
			</description>
		</method>
		<method name="write_int">
			<return type="void">
			</return>
			<argument index="0" name="value" type="int">
			</argument>
			<description>
				Append an integer value at the internal buffer.
			</description>
		</method>
		<method name="write_quat">
			<return type="void">
			</return>
			<argument index="0" name="value" type="Quat">
			</argument>
			<description>
				Append a quaternion ([Quat]) value at the internal buffer.
			</description>
		</method>
		<method name="write_rect2">
			<return type="void">
			</return>
			<argument index="0" name="value" type="Rect2">
			</argument>
			<description>
				Append a [Rect2] value at the internal buffer.
			</description>
		</method>
		<method name="write_string">
			<return type="void">
			</return>
			<argument index="0" name="value" type="String">
			</argument>
			<description>
				Append a [String] value at the internal buffer.
			</description>
		</method>
		<method name="write_uint">
			<return type="void">
			</return>
			<argument index="0" name="value" type="int">
			</argument>
			<description>
				Append an unsigned integer (32 bits) value at the internal buffer.
			</description>
		</method>
		<method name="write_ushort">
			<return type="void">
			</return>
			<argument index="0" name="value" type="int">
			</argument>
			<description>
				Append a short integer (16 bits) value at the internal buffer.
			</description>
		</method>
		<method name="write_vector2">
			<return type="void">
			</return>
			<argument index="0" name="value" type="Vector2">
			</argument>
			<description>
				Append a [Vector2] value at the internal buffer.
			</description>
		</method>
		<method name="write_vector3">
			<return type="void">
			</return>
			<argument index="0" name="value" type="Vector3">
			</argument>
			<description>
				Append a [Vector3] value at the internal buffer.
			</description>
		</method>
	</methods>
	<members>
		<member name="buffer" type="PoolByteArray" setter="set_buffer" getter="get_buffer" default="PoolByteArray(  )">
			The internal byte buffer. Assigning to it will reset the reading index.
		</member>
	</members>
	<constants>
	</constants>
</class>
